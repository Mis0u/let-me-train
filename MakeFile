.PHONY		: help

.DEFAULT_GOAL	= help

EXEC_SF		= symfony
COMPOSER	= composer

SYMFONY		= $(EXEC_SF) console

ifneq (,$(findstring xterm,${TERM}))
	BLACK        := $(shell tput -Txterm setaf 0)
	RED          := $(shell tput -Txterm setaf 1)
	GREEN        := $(shell tput -Txterm setaf 2)
	YELLOW       := $(shell tput -Txterm setaf 3)
	LIGHTPURPLE  := $(shell tput -Txterm setaf 4)
	PURPLE       := $(shell tput -Txterm setaf 5)
	BLUE         := $(shell tput -Txterm setaf 6)
	WHITE        := $(shell tput -Txterm setaf 7)
	RESET := $(shell tput -Txterm sgr0)
else
	BLACK        := ""
	RED          := ""
	GREEN        := ""
	YELLOW       := ""
	LIGHTPURPLE  := ""
	PURPLE       := ""
	BLUE         := ""
	WHITE        := ""
	RESET        := ""
endif

colors: ## Affiche toutes les couleurs
	@echo "${BLACK}BLACK${RESET}"
	@echo "${RED}RED${RESET}"
	@echo "${GREEN}GREEN${RESET}"
	@echo "${YELLOW}YELLOW${RESET}"
	@echo "${LIGHTPURPLE}LIGHTPURPLE${RESET}"
	@echo "${PURPLE}PURPLE${RESET}"
	@echo "${BLUE}BLUE${RESET}"
	@echo "${WHITE}WHITE${RESET}"

## â€”â€” Composer ðŸŽ¶ â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”

install:	## Composer install
	$(COMPOSER) install

upgrade:	## Composer upgrade
	$(COMPOSER) upgrade

update: ## Composer update
	$(COMPOSER) update

## â€”â€” Symfony ðŸ‘“ â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”

maker: ## Appelle la mÃ©thode make
	@read -p "command [options] [arguments]:" command ; \
	$(SYMFONY) make:$$command

sf-console: ## Appelle la mÃ©thode make
	@read -p "command [options] [arguments]:" command ; \
	$(SYMFONY) $$command

server: ## Lance le serveur en daemon
	$(EXEC_SF) server start -d

open: ## Ouvre le navigateur et lance la page
	$(EXEC_SF) open:local
## â€”â€” DataBase ðŸ”‘ â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”

db:	db-drop	db-create db-migrate

db-create:	## CrÃ©Ã© la base de donnÃ©e si elle n'existe pas
	$(SYMFONY) doctrine:database:create --if-not-exists

db-drop:	## Supprime la base de donnÃ©e si elle existe
	$(SYMFONY) doctrine:database:drop --if-exists --force

db-migrate:	## Joue les migrations
	$(SYMFONY) doctrine:migrations:migrate -n

fixtures:	## Joue les fixtures sans interruption
	$(SYMFONY) doctrine:fixtures:load -n


## â€”â€” Maintenance ðŸ¤– â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”

phpcs: ## Examine la syntaxe des fichiers php
	phpcs "./src"

phpcs-fixer: ## Corrige la syntaxe des fichiers php
	phpcbf "./src"

phpstan:	## Lance phpstan
	"./vendor/bin/phpstan" analyse

twigcs:		## Lance Twigsc dans le dossier templates
	twigcs templates

units:		## Lance les tests unitaires/fonctionnels
	"./vendor/bin/phpunit" --testdox

units-opt:		## Lance les tests unitaires/fonctionnels avec options
	@read -p "command [options]:" command ; \
	"./vendor/bin/phpunit" $$command

tests:	phpcs phpstan twigcs units	## Joue phpcs, phpstan, twigcs et phpunit
	@echo "$(GREEN)All tests are passed$(RESET)"

tests-no-units:	phpcs phpstan twigcs	## Lance les tests sans phpunit
	@echo "$(GREEN)All tests $(YELLOW)without units$(RESET) $(GREEN)are passed$(RESET)"

help: ## Affiche les fonctionnalitÃ©s de Make
	@grep -E '(^[a-zA-Z0-9_-]+:.*?##.*$$)|(^##)' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}{printf "\033[32m%-30s\033[0m %s\n", $$1, $$2}' | sed -e 's/\[32m##/[33m/'